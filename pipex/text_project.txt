/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   childs.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/01 03:15:12 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 06:32:38 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

void	child_process_fd(t_pipex *pipex, int *fd)
{
	int	infile_fd;

	close(fd[0]);
	infile_fd = open(pipex->file1, O_RDONLY);
	if (infile_fd == -1)
		pipex->cmd_path1 = NULL;
	dup2(infile_fd, STDIN_FILENO);
	close(infile_fd);
	dup2(fd[1], STDOUT_FILENO);
	close(fd[1]);
}

void	child_process(t_pipex *pipex, int *fd)
{
	child_process_fd(pipex, fd);
	execve(pipex->cmd_path1, pipex->cmd1, pipex->env);
	if (access(pipex->file1, R_OK) == -1 || access(pipex->file1, F_OK) == -1)
		ft_fprintf(2, "Pipex: %s: %s\n", pipex->file1, strerror(errno));
	else
		ft_fprintf(2, "Pipex: [%s] command not found\n", pipex->cmd1[0]);
	free_all(pipex);
	exit(EXIT_FAILURE);
}

void	child2_process_fd(t_pipex *pipex, int *fd)
{
	int	outfile_fd;

	close(fd[1]);
	dup2(fd[0], STDIN_FILENO);
	close(fd[0]);
	outfile_fd = open(pipex->file2, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	dup2(outfile_fd, STDOUT_FILENO);
	close(outfile_fd);
}

void	child2_process(t_pipex *pipex, int *fd)
{
	child2_process_fd(pipex, fd);
	execve(pipex->cmd_path2, pipex->cmd2, pipex->env);
	ft_usleep(1000000);
	if (!pipex->cmd_path2)
		ft_fprintf(2, "Pipex: [%s] command not found\n", pipex->cmd2[0]);
	
	else if (access(pipex->file2, F_OK) == 0)
	{
		if (access(pipex->file2, W_OK) == -1
			|| access(pipex->file2, R_OK) == -1)
			ft_fprintf(2, "Pipex: %s: %s\n", pipex->file2, strerror(errno));
	}
	free_all(pipex);
	exit(EXIT_FAILURE);
}

void ft_usleep(int time)
{
	int i;

	i = 0;
	while (i < time)
		i++;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   files_check.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 07:41:52 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 05:36:40 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

void	check_perms_and_path(t_pipex *pipex)
{
	if (access(pipex->file1, R_OK) == -1 || access(pipex->file1, F_OK) == -1)
		ft_printf("Pipex: %s: %s\n", pipex->file1, strerror(errno));
	if (access(pipex->file2, F_OK) == 0)
	{
		if (access(pipex->file2, W_OK) == -1
			|| access(pipex->file2, R_OK) == -1)
			ft_printf("Pipex: %s: %s\n", pipex->file2, strerror(errno));
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   forking.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 05:28:23 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 06:15:56 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

void	ft_fork(t_pipex *pipex)
{
	int		fd[2];
	pid_t	pid;

	if (pipe(fd) == -1)
	{
		free_all(pipex);
		error_exit("pipe", pipex);
	}
	pid = fork();
	if (pid == -1)
	{
		free_all(pipex);
		error_exit("fork", pipex);
	}
	ft_childs(pipex, pid, fd);
}

void	ft_childs(t_pipex *pipex, pid_t pid_main, int *fd)
{
	pid_t	child2;

	if (pid_main != 0)
	{
		child2 = fork();
		if (child2 == -1)
			error_exit("fork", pipex);
		if (child2 == 0)
			child2_process(pipex, fd);
		else
			wait_for_childs();
	}
	else
		child_process(pipex, fd);
}

void	wait_for_childs(void)
{
	int	status;

	wait(&status);
	ft_printf("status: %d\n", status);
	if (WIFEXITED(status))
	{
		ft_printf("child process exited with status %d\n", WEXITSTATUS(status));
	}
	else
		ft_printf("child process exited abnormally\n");
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free_alloc.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 20:52:51 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 05:10:44 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

void	free_all(t_pipex *pipex)
{
	if (pipex->cmd1)
	{
		free_double_ptr(pipex->cmd1, count_tab(pipex->cmd1));
		pipex->cmd1 = NULL;
	}
	if (pipex->cmd2)
	{
		free_double_ptr(pipex->cmd2, count_tab(pipex->cmd2));
		pipex->cmd2 = NULL;
	}
	if (pipex->path)
	{
		free_double_ptr(pipex->path, count_tab(pipex->path));
		pipex->path = NULL;
	}
	if (pipex->cmd_path1)
	{
		free_ptr(pipex->cmd_path1);
		pipex->cmd_path1 = NULL;
	}
	if (pipex->cmd_path2)
	{
		free_ptr(pipex->cmd_path2);
		pipex->cmd_path2 = NULL;
	}
}

void	error_exit(const char *message, t_pipex *pipex)
{
	perror(message);
	free_all(pipex);
	exit(EXIT_FAILURE);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 05:24:49 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 04:43:38 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

void	init_pipex(t_pipex *pipex, char **av, char **envp)
{
	pipex->file1 = av[1];
	pipex->file2 = av[4];
	pipex->cmd1 = ft_split(av[2], ' ');
	pipex->cmd2 = ft_split(av[3], ' ');
	pipex->env = envp;
	pipex->infile = 0;
	pipex->outfile = 0;
	pipex->cmd_path1 = NULL;
	pipex->cmd_path2 = NULL;
	pipex->path = NULL;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   path.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/31 03:03:56 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 04:23:57 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

int find_dot_slash(char *str)
{
	int i;

	i = 0;
	while (str[i])
	{
		if (str[i] == '.' && str[i + 1] == '/')
			return (1);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   path_uitls.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/31 03:03:56 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 05:10:27 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

void path_verif(t_pipex* pipex)
{
	char *tmp;

	if (find_dot_slash(pipex->cmd1[0]) == 1)
		pipex->cmd_path1 = strdup(pipex->cmd1[0]);
	else
	{
		path_maker(pipex->env, pipex);
		join_command_to_path(pipex, pipex->cmd1[0]);
		tmp = search_executable(pipex);
		if (tmp)
			pipex->cmd_path1 = strdup(tmp);
		else
			pipex->cmd_path1 = NULL;
	}
	if (find_dot_slash(pipex->cmd2[0]) == 1)
		pipex->cmd_path2 = strdup(pipex->cmd2[0]);
	else
	{
		path_maker(pipex->env, pipex);
		join_command_to_path(pipex, pipex->cmd2[0]);
		tmp = search_executable(pipex);
		if (tmp)
			pipex->cmd_path2 = strdup(tmp);
		else
			pipex->cmd_path2 = NULL;
	}
}

void	path_maker(char **env, t_pipex *pipex)
{
	int		i;
	char	*tmp_path;

	i = 0;
	tmp_path = NULL;
	while (env[i])
	{
		if (strncmp(env[i], "PATH=", 5) == 0)
		{
			tmp_path = strdup(env[i] + 5);
			break ;
		}
		i++;
	}
	if (pipex->path)
		free_double_ptr(pipex->path, count_tab(pipex->path));
	pipex->path = ft_split(tmp_path, ':');
	free(tmp_path);
}

void	join_command_to_path(t_pipex *pipex, char *cmd)
{
	int		i;
	int		y;
	char	*tmp;

	i = 0;
	y = 0;
	if (cmd[y] == '.' && cmd[y + 1] == '/')
		return ;
	if (pipex->path == NULL || pipex->path[0] == NULL)
		return ;
	while (pipex->path[i])
	{
		tmp = pipex->path[i];
		pipex->path[i] = ft_strjoin(pipex->path[i], "/");
		free_ptr(tmp);
		tmp = pipex->path[i];
		pipex->path[i] = ft_strjoin(pipex->path[i], cmd);
		free_ptr(tmp);
		i++;
	}
}

char	*search_executable(t_pipex *pipex)
{
	char	*full_path;
	int		i;

	i = 0;
	while (pipex->path[i] != NULL)
	{
		full_path = pipex->path[i];
		if (access(full_path, X_OK) == 0)
			return (full_path);
		i++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 05:07:10 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 06:11:26 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/pipex.h"

int	main(int ac, char **av, char **envp)
{
	t_pipex	pipex;

	if (ac != 5)
	{
		ft_fprintf(2, "Exemple: ./pipex file1 cmd1 cmd2 file2\n");
		return (1);
	}
	init_pipex(&pipex, av, envp);
	path_verif(&pipex);
	ft_fork(&pipex);
	// print_strcut(&pipex);
	free_all(&pipex);
	return (0);
}

void print_strcut(t_pipex *pipex)
{
	ft_printf("path: %t\n\n", pipex->path);
	ft_printf("cmd1: %t\n\n", pipex->cmd1);
	ft_printf("cmd2: %t\n\n", pipex->cmd2);
	ft_printf("file1: %s\n", pipex->file1);
	ft_printf("file2: %s\n", pipex->file2);
	ft_printf("infile: %d\n", pipex->infile);
	ft_printf("outfile: %d\n", pipex->outfile);
	ft_printf("cmd_path1: %s\n", pipex->cmd_path1);
	ft_printf("cmd_path2: %s\n", pipex->cmd_path2);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 05:10:28 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/01 06:03:17 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PIPEX_H
# define PIPEX_H

# include "../libft/libft.h"
# include <unistd.h>
# include <fcntl.h>
# include <stdlib.h>
# include <stdio.h>
# include <string.h>
# include <sys/wait.h>
# include <errno.h>

# define PERM_ERROR 1

typedef struct s_pipex
{
	char	*file1;
	char	*file2;
	char	**cmd1;
	char	**cmd2;
	char	**env;
	char	**path;
	char	*cmd_path1;
	char	*cmd_path2;
	int		infile;
	int		outfile;
	int		perms_1;
	int		perms_2;
}	t_pipex;

void	ft_fork(t_pipex *pipex);
void	init_pipex(t_pipex *pipex, char **av, char **envp);
void	free_all(t_pipex *pipex);
void	join_command_to_path(t_pipex *pipex, char *cmd);
void	path_maker(char **env, t_pipex *pipex);
void 	program_path(t_pipex* pipex);
void	child_process_fd(t_pipex *pipex, int *fd);
void	child_process(t_pipex *pipex, int *fd);
void	child2_process_fd(t_pipex *pipex, int *fd);
void	child2_process(t_pipex *pipex, int *fd);
void	wait_for_childs(void);
void	ft_childs(t_pipex *pipex, pid_t pid_main, int fd[2]);
void	error_exit(const char *message, t_pipex *pipex);
// void	check_files_perms(t_pipex *pipex);
char	*search_executable(t_pipex *pipex);
// void	error_check(t_pipex *pipex);
int		find_dot_slash(char *str);
void	path_verif(t_pipex *pipex);
void	print_strcut(t_pipex *pipex);
void	ft_usleep(int time);


#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/08 20:11:28 by lucas             #+#    #+#             */
/*   Updated: 2024/05/28 01:01:14 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../libft.h"

static	size_t	word_count(const char *str, char delimiter)
{
	size_t		count;
	const char	*ptr;

	if (!str)
		return (0);
	count = 0;
	ptr = str;
	while (*ptr)
	{
		while (*ptr && *ptr == delimiter)
			ptr++;
		if (*ptr && *ptr != delimiter)
		{
			count++;
			while (*ptr && *ptr != delimiter)
				ptr++;
		}
	}
	return (count);
}

static	void	*free_tab(char **tab, size_t index)
{
	size_t	i;

	i = 0;
	while (i < index)
	{
		free_ptr(tab[i]);
		i++;
	}
	free_ptr(tab);
	return (NULL);
}

static	char	*allocate_word(const char *start, size_t len)
{
	char	*word;
	size_t	i;

	word = malloc(sizeof(char) * (len + 1));
	if (!word)
		return (NULL);
	i = 0;
	while (i < len)
	{
		word[i] = start[i];
		i++;
	}
	word[len] = '\0';
	return (word);
}

char	**ft_split(char const *s, char c)
{
	char		**tab;
	size_t		i;
	size_t		count;
	const char	*word_start;

	count = word_count(s, c);
	tab = malloc(sizeof(char *) * (count + 1));
	if (!tab)
		return (NULL);
	i = 0;
	while (i < count)
	{
		while (*s == c)
			s++;
		word_start = s;
		while (*s && *s != c)
			s++;
		tab[i] = allocate_word(word_start, s - word_start);
		if (tab[i] == NULL)
			return (free_tab(tab, i));
		i++;
	}
	tab[count] = (NULL);
	return (tab);
}
