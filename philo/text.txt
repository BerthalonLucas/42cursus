/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/10/20 02:21:57 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/08 06:01:59 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (2048);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/01 15:10:47 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/08 05:57:24 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

void	ft_putstr_fd(char *s, int fd)
{
	int	i;

	i = 0;
	if (!s)
		return ;
	while (s[i])
	{
		write(fd, &s[i], 1);
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   garbage_collector.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: root <root@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 06:31:08 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/08 08:26:07 by root             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

void *add_to_gb(t_gb *gb, void *ptr)
{
	t_gb *new;

	new = malloc(sizeof(t_gb));
	if (!new)
		return (NULL);
	new->ptr = ptr;
	new->next = gb->next;
	gb->next = new;
	return (ptr);
}

void free_gb(t_gb *gb)
{
	t_gb *tmp;

	if (!gb)
		return ;
	while (gb->next)
	{
		tmp = gb->next;
		free(gb->next->ptr);
		gb->next = gb->next->next;
		free(tmp);
	}
}

void *new_malloc(t_a *a, size_t size)
{
	void *ptr;

	ptr = malloc(size);
	if (!ptr)
	{
		free_gb(a->gb);
		return (NULL);
	}
	add_to_gb(a->gb, ptr);
	return (ptr);
}

void free_all(t_a *a)
{
	free_gb(a->gb);
	if (a->gb)
		free(a->gb);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 06:28:15 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/09 02:49:00 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

void init_struct(t_a *a, int ac, char **av)
{
    memset(a, 0, sizeof(t_a));
    a->gb = (t_gb *)malloc(sizeof(t_gb));
    if (!a->gb)
    {
        ft_putstr_fd("Error: Memory allocation failed\n", 2);
        return;
    }
    a->gb->next = NULL;
    a->nb_philo = ft_atol(av[1]);
    a->time_to_die = ft_atol(av[2]);
    a->time_to_eat = ft_atol(av[3]);
    a->time_to_sleep = ft_atol(av[4]);
    if (ac == 6)
        a->nb_eat = ft_atol(av[5]);
    else
        a->nb_eat = -1;
    a->philo = NULL;
    a->forks = NULL;
}

void init_philosophers(t_a *a)
{
    int i;

    a->philo = new_malloc(a, sizeof(t_philo *) * a->nb_philo);
    if (!a->philo)
        return;
    i = 0;
    while (i < a->nb_philo)
    {
        a->philo[i] = new_malloc(a, sizeof(t_philo));
        if (!a->philo[i])
            return;
        a->philo[i]->id = i;
        a->philo[i]->left = &a->forks[i];
        a->philo[i]->right = &a->forks[(i + 1) % a->nb_philo];
        a->philo[i]->time_to_die = a->time_to_die;
        a->philo[i]->time_to_eat = a->time_to_eat;
        a->philo[i]->time_to_sleep = a->time_to_sleep;
        a->philo[i]->last_time_eat = 0;
        a->philo[i]->has_eat = 0;
        a->philo[i]->nb_eat = a->nb_eat;
        a->philo[i]->time_start = a->time_start;
		a->philo[i]->stop = 0;
		a->philo[i]->print = &a->print[0];
        i++;
    }
}

void	init_mutex(t_a *a)
{
	int	i;

	i = 0;
	a->forks = new_malloc(a, sizeof(pthread_mutex_t) * a->nb_philo);
	a->print = new_malloc(a, sizeof(pthread_mutex_t));
	if (!a->forks || !a->print)
	{
		free_all(a);
		return ;
	}
	while (i < a->nb_philo)
	{
		if (pthread_mutex_init(&a->forks[i], NULL) != 0)
		{
			ft_putstr_fd("Error initializing mutex\n", 2);
			free_all(a);
			return ;
		}
		i++;
	}
	if (pthread_mutex_init(&a->print[0], NULL) != 0)
	{
		ft_putstr_fd("Error initializing mutex\n", 2);
		free_all(a);
		return ;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 06:08:52 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/09 02:57:26 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

// void	print_philosophers(t_a *a)
// {
// 	int	i;

// 	i = 0;
// 	while (i < a->nb_philo)
// 	{
// 		printf("Philosopher [%d]: gauche [%p], droite = [%p]}\n",
// 			a->philo[i]->id, (void *)a->philo[i]->left, (void *)a->philo[i]->right);
// 		i++;
// 	}
// }

void print_struct_philo(t_a *a)
{
	int i = 0;
	while (i < a->nb_philo)
	{
		printf("id = %d\n", a->philo[i]->id);
		printf("stop = %d\n", a->philo[i]->stop);
		printf("time_to_die = %d\n", a->philo[i]->time_to_die);
		printf("time_to_sleep = %d\n", a->philo[i]->time_to_sleep);
		printf("time_to_eat = %d\n", a->philo[i]->time_to_eat);
		printf("last_time_eat = %d\n", a->philo[i]->last_time_eat);
		printf("time_start = %lld\n", a->philo[i]->time_start);
		printf("has_eat = %d\n", a->philo[i]->has_eat);
		printf("nb_eat = %d\n", a->philo[i]->nb_eat);
		printf("left = %p\n", (void *)a->philo[i]->left);
		printf("right = %p\n", (void *)a->philo[i]->right);
		i++;
	}
}

void print_struct_a(t_a *a)
{
	printf("nb_philo = %d\n", a->nb_philo);
	printf("time_to_die = %d\n", a->time_to_die);
	printf("time_to_eat = %d\n", a->time_to_eat);
	printf("time_to_sleep = %d\n", a->time_to_sleep);
	printf("nb_eat = %d\n", a->nb_eat);
	printf("time_start = %lld\n", a->time_start);
	printf("philo = %p\n", (void *)a->philo);
	printf("gb = %p\n", (void *)a->gb);
	printf("forks = %p\n", (void *)a->forks);
}
void print_struct_philo_alone(t_philo *philo)
{
	printf("id = %d\n", philo->id);
	printf("stop = %d\n", philo->stop);
	printf("time_to_die = %d\n", philo->time_to_die);
	printf("time_to_sleep = %d\n", philo->time_to_sleep);
	printf("time_to_eat = %d\n", philo->time_to_eat);
	printf("last_time_eat = %d\n", philo->last_time_eat);
	printf("time_start = %lld\n", philo->time_start);
	printf("has_eat = %d\n", philo->has_eat);
	printf("nb_eat = %d\n", philo->nb_eat);
	printf("left = %p\n", (void *)philo->left);
	printf("right = %p\n", (void *)philo->right);
}

int	main(int ac, char **av)
{
	t_a	a;

	if (valid_start(ac, av))
		return (1);
	init_struct(&a, ac, av);
	init_mutex(&a);
	init_philosophers(&a);
	a.time_start = gt();
	put_time(&a);
	// print_struct_philo(&a);
	// print_struct_a(&a);
	printf("time start = %lld\n", a.time_start);
	phtread_create_phi(&a);
	int i = 0;
	while (i < a.nb_philo)
	{
		pthread_mutex_destroy(&a.forks[i]);
		i++;
	}
	pthread_mutex_destroy(a.print);
	free_all(&a);
	return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: root <root@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 06:00:02 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/08 08:23:19 by root             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

int valid_args(int ac, char **av)
{
	int i;
	int j;

	i = 1;
	while (i < ac)
	{
		j = 0;
		while (av[i][j])
		{
			if (!isdigit(av[i][j]))
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

long ft_atol(const char *str)
{
	int i;
	int res;

	i = 0;
	res = 0;
	while (str[i])
	{
		res = res * 10 + str[i] - '0';
		i++;
	}
	return (res);
}

int valid_start(int ac, char **av)
{
	if (ac != 5 && ac != 6)
	{
    	ft_putstr_fd("only 5 args needed\n", 2);
		return (1);
	}
	if (!valid_args(ac, av))
	{
		ft_putstr_fd("only numbers are allowed\n", 2);
		return (1);
	}
	if (atol(av[1]) < 2 || atol(av[1]) > 200)
	{
		ft_putstr_fd("number of philosophers must be between 2 and 200\n", 2);
		return (1);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 03:57:54 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/09 03:44:13 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PHILO_H
#define PHILO_H

#include <stdio.h> 
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/time.h> 
#include <string.h>
#include <ctype.h>

typedef struct s_gb
{
	void	*ptr;
	struct s_gb	*next;
}		t_gb;

typedef struct s_philo
{
	int id;
	int stop;
	int time_to_die;
	int time_to_sleep;
	int time_to_eat;
	int last_time_eat;
	long long time_start;
	int has_eat;
	int nb_eat;
	pthread_mutex_t *left;
	pthread_mutex_t *right;
	pthread_mutex_t *print;
}		t_philo;

typedef struct s_a
{
	int		nb_philo;
	int		time_to_die;
	int		time_to_eat;
	int		time_to_sleep;
	int		nb_eat;
	long long time_start;
	t_philo	**philo;
	t_gb	*gb;
	pthread_mutex_t *forks;
	pthread_mutex_t *print;
	
}				t_a;

void	ft_putstr_fd(char *s, int fd);
int		ft_isdigit(int c);
int valid_args(int ac, char **av);
int valid_start(int ac, char **av);
long atol(const char *str);
void *routine(void *arg);
void *add_to_gb(t_gb *gb, void *ptr);
void free_gb(t_gb *gb);
void *new_malloc(t_a *a, size_t size);
void free_all(t_a *a);
void init_mutex(t_a *a);
void	init_philosophers(t_a *a);
long ft_atol(const char *str);
void	init_struct(t_a *a, int ac, char **av);
void *routine(void *arg);
void phtread_create_phi(t_a *a);
long long gt(void);
long long ct(long long time);
void put_time(t_a *a);
int current_time(t_philo *philo);

void print_struct_a(t_a *a);
void print_struct_philo(t_a *a);
void print_struct_philo_alone(t_philo *philo);
void ft_usleep(long long time_in_ms);


#endif

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routines.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 06:41:34 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/09 03:44:48 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

void *routine(void *arg)
{
	t_philo *philo;
	long long time_since_last_meal;

	philo = (t_philo *)arg;
	while (1)
	{
		print_struct_philo_alone(philo);
		printf("[%d] Philosopher [%d] is thinking\n", current_time(philo), philo->id);
		pthread_mutex_lock(philo->left);
		printf("[%d] Philosopher [%d] has taken a fork\n", current_time(philo), philo->id);
		pthread_mutex_lock(philo->right);
		printf("[%d] Philosopher [%d] has taken a fork\n", current_time(philo), philo->id);
		philo->last_time_eat = gt();
		philo->has_eat++;
		printf("[%d] Philosopher [%d] is eating\n", current_time(philo), philo->id);
		ft_usleep(philo->time_to_eat);
		pthread_mutex_unlock(philo->left);
		pthread_mutex_unlock(philo->right);
		printf("[%d] Philosopher [%d] is sleeping\n", current_time(philo), philo->id);
		ft_usleep(philo->time_to_sleep);
		if (philo->has_eat == philo->nb_eat)
			break;
		time_since_last_meal = gt() - philo->last_time_eat;
		if (time_since_last_meal > philo->time_to_die)
		{
			printf("[%d] Philosopher [%d] died\n", current_time(philo), philo->id);
			philo->stop = 1;
			break;
		}
	}
	return (NULL);
}

int current_time(t_philo *philo)
{
	int time;

	time = ct(philo->time_start);
	return (time);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   threads.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 07:00:38 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/09 01:04:53 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

void phtread_create_phi(t_a *a)
{
	int i;
	pthread_t *threads;

	threads = new_malloc(a, sizeof(pthread_t) * a->nb_philo);
	i = 0;
	while (i < a->nb_philo)
	{
		pthread_create(&threads[i], NULL, routine, (void *)a->philo[i]);
		usleep(100);
		i++;
	}
	i = 0;
	while (i < a->nb_philo)
	{
		pthread_join(threads[i], NULL);
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   time_related_fonctions.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lberthal <lberthal@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/08 21:36:44 by lberthal          #+#    #+#             */
/*   Updated: 2024/06/09 03:44:06 by lberthal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


#include "../includes/philo.h"

long long gt(void)
{
	struct timeval tv;

	gettimeofday(&tv, NULL);
	return ((long long)tv.tv_sec * 1000 + (long long)tv.tv_usec / 1000);
}

long long ct(long long time)
{
	return (gt() - time);
}

void put_time(t_a *a)
{
	int i;

	i = 0;
	while (i < a->nb_philo)
	{
		a->philo[i]->time_start = a->time_start;
		i++;
	}
}

void ft_usleep(long long time_in_ms)
{
	struct timeval start;
	struct timeval current;
	long long start_time;
	long long current_time;

	gettimeofday(&start, NULL);
	start_time = start.tv_sec * 1000LL + start.tv_usec / 1000LL;

	while (1)
	{
		gettimeofday(&current, NULL);
		current_time = current.tv_sec * 1000LL + current.tv_usec / 1000LL;
		if (current_time - start_time >= time_in_ms)
			break;
	}
}
